import requests
from tqdm import tqdm
import pandas as pd
import os

FACTS_API_URL = "https://catfact.ninja/fact"
OUTPUT_FILENAME = "data/cat_facts.csv"


def load_cat_facts_data(facts_api_url: str, num_of_items: int = 10) -> list[dict]:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–∫—Ç—ã –æ –∫–æ—Ç–∏–∫–∞—Ö"

    items = []

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("data", exist_ok=True)

    print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º {num_of_items} —Ñ–∞–∫—Ç–æ–≤ –æ –∫–æ—Ç–∏–∫–∞—Ö –∏–∑ Cat Facts API...")

    for item_number in tqdm(range(num_of_items)):
        try:
            response = requests.get(
                facts_api_url,
                timeout=15,
                headers={
                    "Content-Type": "application/json",
                    "User-Agent": "Cat Facts Reader v1.0",
                },
            )

            if response.status_code == 200:
                fact_data = response.json()

                fact_data["request_number"] = item_number + 1
                fact_data["api_source"] = "catfact.ninja"

                items.append(fact_data)

            else:
                print(
                    f"\n–í–Ω–∏–º–∞–Ω–∏–µ! –ö–æ–¥ —Ñ–∞–∫—Ç–∞ #{item_number + 1} - {response.status_code}"
                )

        except Exception as e:
            print(f"\n–û—à–∏–±–∫–∞! –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–∫—Ç–∞ #{item_number + 1}: {e}")

    return items


def convert_to_df_and_save(
    data: list[dict],
    fname: str,
) -> pd.DataFrame | None:
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ CSV

    if data:
        df = pd.DataFrame(data)

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(fname), exist_ok=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        df.to_csv(fname, index=False, encoding="utf-8")
        print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {fname}")
        return df

    print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    return None


def main():
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–∫—Ç–æ–≤ –æ –∫–æ—Ç–∏–∫–∞—Ö

    print("üê± –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–æ—Ç–∏–∫–∞—Ö? üê±")
    print("–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: https://catfact.ninja/")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–∫—Ç—ã –æ –∫–æ—Ç–∏–∫–∞—Ö
    cat_facts = load_cat_facts_data(FACTS_API_URL, 20)

    if not cat_facts:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–∫—Ç—ã")
        return

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    result = convert_to_df_and_save(cat_facts, OUTPUT_FILENAME)

    if result is not None:
        print(f"\n–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(result)} —Ñ–∞–∫—Ç–æ–≤ –æ –∫–æ—Ç–∏–∫–∞—Ö!")

        print("\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö")
        print(result.info())

        print("–ü–µ—Ä–≤—ã–µ 5 —Ñ–∞–∫—Ç–æ–≤ –æ –∫–æ—Ç–∏–∫–∞—Ö")
        if "fact" in result.columns:
            for i, fact in enumerate(result["fact"].head(5), 1):
                print(f"{i}. {fact}")

        print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print(f"–í—Å–µ–≥–æ —Ñ–∞–∫—Ç–æ–≤: {len(result)}")
        print(f"–ö–æ–ª–æ–Ω–∫–∏: {list(result.columns)}")

    print("\n–ì–æ—Ç–æ–≤–æ! –í—Å–µ —Ñ–∞–∫—Ç—ã –æ –∫–æ—Ç–∏–∫–∞—Ö –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! üê±")


if __name__ == "__main__":
    main()
